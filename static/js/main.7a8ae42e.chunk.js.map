{"version":3,"sources":["components/Button.js","App.js","components/Display.js","serviceWorker.js","index.js"],"names":["Button","id","view","value","handleChange","className","onClick","e","valueButtons","class","operationButtons","App","state","expression","result","prevResult","prevSign","maxValWarning","setState","handleNumber","target","textContent","length","join","handleSigns","sign","match","slice","pop","handleEqualsSign","calculateResult","handleDecimalSign","temporaryValue","handleClearSign","string","correctString","replace","eval","handleChangeSign","firstVal","newExpression","newPrevResult","this","map","button","makeSpecialOperation","React","Component","Display","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a8ae42e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = ({id, view, value, handleChange}) => {\n    return (\n        <div \n            id={id} \n            className={\"button\" + \" \" + view}  \n            onClick={(e) => handleChange(e)}>\n            {value}\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport './App.css';\nimport Button from './components/Button.js';\nimport Display from './components/Display.js';\n\nconst valueButtons = [\n  {id: \"seven\", value: \"7\", class:\"number\"},\n  {id: \"eight\", value: \"8\", class:\"number\"},\n  {id: \"nine\", value: \"9\", class:\"number\"},\n  {id: \"four\", value: \"4\", class:\"number\"},\n  {id: \"five\", value: \"5\", class:\"number\"},\n  {id: \"six\", value: \"6\", class:\"number\"},\n  {id: \"one\", value: \"1\", class:\"number\"},\n  {id: \"two\", value: \"2\", class:\"number\"},\n  {id: \"three\", value: \"3\", class:\"number\"},\n  {id: \"zero\", value: \"0\", class:\"number\"}\n];\n\nconst operationButtons = [\n  {id: \"divide\", value: \"/\", class:\"operator\"},\n  {id: \"multiply\", value: \"*\", class:\"operator\"},\n  {id: \"subtract\", value: \"-\", class:\"operator\"},\n  {id: \"add\", value: \"+\", class:\"operator\"}\n];\n\nclass App extends React.Component {\n  state = {\n    expression: [],\n    result: 0,\n    prevResult: [],\n    prevSign: \"\"\n  }\n\n  maxValWarning = () => {\n    this.setState({\n      result: 'Digit Limit Met'\n    });\n  }\n\n  handleNumber = (e) => {\n    const value = e.target.textContent;\n    const expression = this.state.expression;\n    const prevResult = this.state.prevResult;\n    const prevSign = this.state.prevSign;\n    if(expression.length > 13) {\n      this.maxValWarning();\n    } else if (prevSign === \"=\") {\n      this.setState({\n        expression: [value],\n        result: 0,\n        prevResult: [...prevResult],\n        prevSign: \"\"\n      });      \n    } else if(value === \"0\" && expression.length === 1 && expression[0] === \"0\") {\n        this.setState({\n        expression: [...expression],\n        result: [...prevResult].join(''),\n        prevResult: [...prevResult],\n        prevSign: this.state.prevSign === \".\" ? \".\" : \"\"\n      }); \n    } else {\n      this.setState({\n        expression: [...expression, value],\n        result: [...prevResult, value].join(''),\n        prevResult: [...prevResult, value],\n        prevSign: this.state.prevSign === \".\" ? \".\" : \"\"\n      });\n    }\n  }\n  \n  handleSigns = (e) => {\n    const sign = e.target.textContent;\n    const expression = [...this.state.expression];\n    const prevResult = this.state.prevResult;\n      if ( expression[expression.length - 1] === \"-\" && expression[expression.length - 2].match(/[//+*-]/)) {\n      this.setState({\n        expression: [...expression.slice(0, -2), sign],\n        result: sign,\n        prevResult: [],\n        prevSign: sign\n      });\n    } else if (this.state.prevSign.match(/[//+*]/)) {\n      if (sign !== \"-\"){\n        expression.pop();\n      }\n      this.setState({\n        expression: [...expression, sign],\n        result: sign,\n        prevResult: [],\n        prevSign: sign\n      });\n    } else if (this.state.prevSign === \"=\") {\n      this.setState({\n        expression: [...prevResult, sign],\n        result: sign,\n        prevResult: [],\n        prevSign: sign\n      }); \n    } else {\n     this.setState({\n        expression: [...expression, sign],\n        result: sign,\n        prevResult: [],\n        prevSign: sign\n      }); \n    }\n  }\n  \n  handleEqualsSign = (e) => {\n    const value = e.target.textContent;\n    const result = this.calculateResult();\n    this.setState({\n      expression: [...this.state.expression, \"=\"],\n      result: result,\n      prevResult: [result],\n      prevSign: value\n    });\n  }\n  \n  handleDecimalSign = (e) => {\n    const sign = e.target.textContent;\n    const prevResult = this.state.prevResult;\n    const temporaryValue = prevResult.length === 0 ? [\"0\", sign] : [...prevResult, sign];\n    if(this.state.prevSign !== \".\") {\n      this.setState({\n        expression: [...this.state.expression, sign],\n        result: temporaryValue.join(''),\n        prevResult: temporaryValue,\n        prevSign: sign\n      }); \n    }\n  }\n  \n  handleClearSign = (e) => {\n    this.setState({\n           expression: [],\n           result: 0,\n           prevResult: [],\n           prevSign: \"\"\n         });\n  }\n  \n  calculateResult = () => {\n    const string = this.state.expression.join('');\n    let correctString = string.replace(\"--\", \"+\");\n    return eval(correctString);\n  }\n  \n   handleChangeSign = (e) => {\n    const prevResult = this.state.prevResult;\n    const expression = this.state.expression;\n    const firstVal = prevResult[0];\n    const newExpression = firstVal === \"-\" ? expression.slice(1) : [\"-\", ...this.state.expression];\n    const newPrevResult = firstVal === \"-\" ? prevResult.slice(1) : [\"-\", ...this.state.prevResult];\n    this.setState({\n      expression: newExpression,\n      result: newPrevResult.join(''),\n      prevResult: newPrevResult\n    });\n   }\n  \n  render() {\n    return (\n      <div id=\"container\">\n        <Display \n          expression={this.state.expression} \n          result={this.state.result}/>\n        {valueButtons.map( button => <Button \n                                       id={button.id}\n                                       handleChange={this.handleNumber}\n                                       value={button.value}\n                                       view={button.class} />)}\n        {operationButtons.map( button => <Button \n                                           id={button.id}\n                                           handleChange={this.handleSigns}\n                                           value={button.value}\n                                           view={button.class} />)}\n        \n        <Button \n          id=\"decimal\" \n          handleChange={this.handleDecimalSign} \n          value=\".\" \n          view=\"number\" />\n        <Button \n          id=\"equals\" \n          handleChange={this.handleEqualsSign} \n          value=\"=\" \n          view=\"equals\" />\n        <Button \n          id=\"clear\" \n          handleChange={this.handleClearSign} \n          value=\"C\" \n          view=\"specialOperator\" />\n        <Button \n          id=\"percentage\" \n          handleChange={this.makeSpecialOperation} \n          value=\"%\" \n          view=\"specialOperator\" />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\n\nconst Display = ({expression, result}) => {\n    return (\n        <div id=\"result\">\n            <div id=\"expression\">{expression}</div>\n            <div id=\"display\">{result}</div>\n        </div>\n    );\n}\n\nexport default Display;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}